# run01
#    image1 = tf.expand_dims(x0, 1)
#   image2 = tf.expand_dims(x1, 1)
#   input_img = tf.concat([image1, image2], axis=1)

#   conv01 = tf.keras.layers.Conv3D(15, kernel_size=(1, 3, 3), activation = _relu, padding = 'same')(input_img)
#   conv001 = tf.keras.layers.Conv3D(15, kernel_size=(1, 3, 3), activation = _relu, padding = 'same')(conv01)
#   conv0001 = tf.keras.layers.Conv3D(15, kernel_size=(2, 3, 3), activation = _relu, padding = 'same')(conv001)
#   conv01 = tf.keras.layers.Concatenate(axis =-1)([conv01, conv001, conv0001])
#   conv02 = tf.keras.layers.Conv3DTranspose(45, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(conv01)
#   down01 = tf.keras.layers.AveragePooling3D((1, 2, 2), padding='same', data_format='channels_last')(conv02)
#   conv03 = tf.keras.layers.Conv3DTranspose(50, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(down01)
#   down02 = tf.keras.layers.AveragePooling3D((1, 2, 2), padding='same', data_format='channels_last')(conv03)
#   conv04 = tf.keras.layers.Conv3DTranspose(55, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(down02)
#   down03 = tf.keras.layers.AveragePooling3D((1, 2, 2), padding='same', data_format='channels_last')(conv04)
#   conv05 = tf.keras.layers.Conv3DTranspose(60, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(down03)
#   down04 = tf.keras.layers.AveragePooling3D((1, 2, 2), padding='same', data_format='channels_last')(conv05)
#   conv06 = tf.keras.layers.Conv3DTranspose(65, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(down04)
#   down05 = tf.keras.layers.AveragePooling3D((1, 2, 2), padding='same', data_format='channels_last')(conv06)
#   conv07 = tf.keras.layers.Conv3DTranspose(70, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(down05)
#   down06 = tf.keras.layers.AveragePooling3D((1, 2, 2), padding='same', data_format='channels_last')(conv07)
#   conv07 = tf.keras.layers.Conv3DTranspose(75, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(down06)
#   upd01 = tf.keras.layers.UpSampling3D((1, 2, 2))(conv07)
#   conv08 = tf.keras.layers.Conv3D(70, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(upd01)
#   upd02 = tf.keras.layers.UpSampling3D((1, 2, 2))(conv08)
#   conv09 = tf.keras.layers.Conv3D(65, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(upd02)
#   upd03 = tf.keras.layers.UpSampling3D((1, 2, 2))(conv09)
#   conv10 = tf.keras.layers.Conv3D(60, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(upd03)
#   upd04 = tf.keras.layers.UpSampling3D((1, 2, 2))(conv10)
#   conv11 = tf.keras.layers.Conv3D(55, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(upd04)
#   upd05 = tf.keras.layers.UpSampling3D((1, 2, 2))(conv11)
#   conv12 = tf.keras.layers.Conv3D(50, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(upd05)
#   upd06 = tf.keras.layers.UpSampling3D((1, 2, 2))(conv12)
#   conv12 = tf.keras.layers.Conv3D(45, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(upd06)
#   conv13 = tf.keras.layers.Conv3D(40, kernel_size=(3, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(conv12)
#   conv14 = tf.keras.layers.Conv3D(35, kernel_size=(2, 3, 3), activation = _relu, padding = 'same', strides = (2,1,1))(conv13)
#   squeeeexe = tf.squeeze(conv14, axis=[1])
#   output = tf.keras.layers.Conv2D(3, kernel_size=(1), padding = 'same')(squeeeexe)